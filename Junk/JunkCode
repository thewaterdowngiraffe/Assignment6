
    private void changeGridOld(){
        // this will regenerate the remaining target grid, there is some room for improvement, but im to lazy to do that atm
        // we need to make a prune function to check all queue for repeat moves, these will need to be removed
        boolean resume = true;
        int spacing = getMinShipRemaining();
        int[] nextshot = lastShot;
        if(!targetQueue.isEmpty()){
             nextshot = targetQueue.get(0);
        }

        targetQueue.clear();
        nextshot[0] = nextshot[0]-(spacing-1) >= 0? (nextshot[0]-(spacing-1))%spacing: 0;

        nextshot[0] = nextshot[0]-(spacing-1) >= 0? (nextshot[0]-1): 0;

        for (int i = nextshot[0]; i < gameSize; i++) {
            int target = resume?
                    nextshot[1] - (spacing-1) >=0 ?  nextshot[1] - (spacing-1): 0
                    :
                    i%spacing;
            resume = false;

            for (int j = target; j < gameSize; j+= (spacing)) {
                int[] tmp = new int[]{i,j};
                this.targetQueue.add(tmp);
            }
        }
    }// end changeGridOld()


    /**
         * if not used when project done, delete it.
         * @return
         */
        private int getMaxShipRemaining(){
            int Maximum = remainingShips.get(0);
            for (int i = 1; i < remainingShips.size(); i++) {
                if (Maximum < remainingShips.get(i))
                    Maximum = remainingShips.get(i);
            }
            return Maximum;
        }// end getMaxShipRemaining()


        //            if (worstGame < shotTaken.size() && battleShip.allSunk()){
        //                worstGame = shotTaken.size();
        //
        //                Iterator itr = shotTaken.iterator();
        //
        //                // check element is present or not. if not loop will
        //                // break.
        //                try {
        //                    FileWriter myWriter = new FileWriter("filename.txt");
        //                    while (itr.hasNext()) {
        //                        Point point = (Point) itr.next();
        //                        myWriter.write(String.valueOf(point));
        //                        myWriter.write("\n");
        //                    }
        //
        //                    myWriter.close();
        //                    myWriter = new FileWriter("shotTaken.csb");
        //
        //                    for (int[] h : hits) {
        //                        Point point = new Point(h[0], h[1]);
        //                        myWriter.write(String.valueOf(point));
        //                        myWriter.write("\n");
        //                    }
        //                    myWriter.close();
        //
        //
        //                } catch (IOException e) {
        //                    System.out.println("An error occurred.");
        //                    e.printStackTrace();
        //                }
        //            }




        //        try {
        //            FileWriter myWriter = new FileWriter("targetGrid.csv");
        //
        //            for (int[] h : targetQueue) {
        //                Point point = new Point(h[0], h[1]);
        //                myWriter.write(String.valueOf(point));
        //                myWriter.write("\n");
        //            }
        //
        //
        //            myWriter.close();
        //        } catch (IOException e) {
        //            System.out.println("An error occurred.");
        //            e.printStackTrace();
        //        }